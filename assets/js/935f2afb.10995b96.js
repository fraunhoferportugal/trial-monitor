"use strict";(self.webpackChunktm_docs=self.webpackChunktm_docs||[]).push([[53],{1109:function(e){e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"category","label":"Getting started","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction","href":"/trial-monitor/","docId":"Getting started/install"},{"type":"link","label":"Configuration","href":"/trial-monitor/Getting started/configuration","docId":"Getting started/configuration"},{"type":"link","label":"Deployment","href":"/trial-monitor/Getting started/deployment","docId":"Getting started/deployment"}]},{"type":"category","label":"Data Connectors","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Overview","href":"/trial-monitor/Data Connectors/overview","docId":"Data Connectors/overview"},{"type":"link","label":"FHIR","href":"/trial-monitor/Data Connectors/fhir","docId":"Data Connectors/fhir"},{"type":"link","label":"Firebase","href":"/trial-monitor/Data Connectors/firebase","docId":"Data Connectors/firebase"},{"type":"link","label":"SQL","href":"/trial-monitor/Data Connectors/sql","docId":"Data Connectors/sql"}]},{"type":"category","label":"Databases","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Overview","href":"/trial-monitor/Databases/overview","docId":"Databases/overview"},{"type":"link","label":"Fhir","href":"/trial-monitor/Databases/fhir","docId":"Databases/fhir"},{"type":"link","label":"Firebase","href":"/trial-monitor/Databases/firebase","docId":"Databases/firebase"},{"type":"link","label":"SQL","href":"/trial-monitor/Databases/sql","docId":"Databases/sql"}]},{"type":"category","label":"UI Definition","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Overview","href":"/trial-monitor/UI Definition/overview","docId":"UI Definition/overview"},{"type":"link","label":"Data Components","href":"/trial-monitor/UI Definition/ui_components","docId":"UI Definition/ui_components"},{"type":"link","label":"Layout","href":"/trial-monitor/UI Definition/layout","docId":"UI Definition/layout"},{"type":"link","label":"Dashboard","href":"/trial-monitor/UI Definition/dashboard","docId":"UI Definition/dashboard"}]},{"type":"category","label":"Advanced","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Custom permissions","href":"/trial-monitor/Advanced/custom-permissions","docId":"Advanced/custom-permissions"},{"type":"link","label":"Extending data formatting","href":"/trial-monitor/Advanced/reducers","docId":"Advanced/reducers"}]}]},"docs":{"Advanced/custom-permissions":{"id":"Advanced/custom-permissions","title":"Custom permissions","description":"With Keycloak authentication, by default, users have access to all pages and components. However, you might want to limit the access to specific pages or components to certain users. We can achieve this by taking advantage of Keycloak roles.","sidebar":"tutorialSidebar"},"Advanced/reducers":{"id":"Advanced/reducers","title":"Extending data formatting","description":"With Trial Monitor we try to do some educated guesses regarding how data is structured based on each database type. Once data is retrieved it goes through its internal functions to be formatted so it can be interpreted by the UI components. While this works in many situations, sometimes additional processing may be required. For instance, data might be stored in a structured not supported by the frontend (e.g. stringified JSON), or you need to transform the data (e.g. calculate the score of a questionnaire based on raw data). Understanding these use cases, it is possible to write your own parsing functions to have control over the formatting process.","sidebar":"tutorialSidebar"},"Data Connectors/fhir":{"id":"Data Connectors/fhir","title":"FHIR","description":"The FHIR connector currently only supports Hapi FHIR implementation of the HL7 FHIR standard (version R4). In this connector, the field tables links to the resources from the FHIR standard and for each one we use the search endpoints to retrieve the data, using the available and compatible filters if desired.","sidebar":"tutorialSidebar"},"Data Connectors/firebase":{"id":"Data Connectors/firebase","title":"Firebase","description":"The Firebase connector currently supports Cloud Firestore databases. The Cloud Firestore connector follows a NoSQL paradigm, in which data is organized on a flat structure. Collections should have references to other collections in a similar fashion to a SQL structure. A collection is linked by defining a property that references the doc id in other collections.","sidebar":"tutorialSidebar"},"Data Connectors/overview":{"id":"Data Connectors/overview","title":"Overview","description":"Trial Monitor is capable of connecting to multiple databases and presenting information from these databases under a single interface. Currently Trial Monitor has database connectors for SQL, Firebase, and FHIR.","sidebar":"tutorialSidebar"},"Data Connectors/sql":{"id":"Data Connectors/sql","title":"SQL","description":"The SQL connector offers support to common SQL dialects (PostgreSQL, MySQL, MariaDB, SQLite and MSSQL), and uses Sequelize under the hood to make the connections.","sidebar":"tutorialSidebar"},"Databases/fhir":{"id":"Databases/fhir","title":"Fhir","description":"Within the Fhir data standard, two database types are supported: Google Cloud Healthcare API and Hapi Fhir Servers.","sidebar":"tutorialSidebar"},"Databases/firebase":{"id":"Databases/firebase","title":"Firebase","description":"Trial Monitor offers support to both types of Firebase databases: Cloud Firestore and Firebase Realtime Database. Support for Firebase Real Database is limited to a single database and if data is normalized all data will be requested on a single query. For most projects we recommend Cloud Firestore.","sidebar":"tutorialSidebar"},"Databases/overview":{"id":"Databases/overview","title":"Overview","description":"Trial Monitor is capable of connecting to multiple databases and present information from these different databases under a single interface. Currently we support four different types of databases: SQL, Firebase, and Fhir\\\\*.","sidebar":"tutorialSidebar"},"Databases/sql":{"id":"Databases/sql","title":"SQL","description":"SQL support is achieved through Sequelize. We need to define the connection parameters, as well as the database models and their relationships for the information we want to display on the user interface.","sidebar":"tutorialSidebar"},"Getting started/configuration":{"id":"Getting started/configuration","title":"Configuration","description":"Trial Monitor uses simple configuration files to set up the platform for a specific project. Each instance of Trial Monitor has a folder with YAML or JSON files that personalize among other things the database authentication credentials, Web pages for displaying data, or the characteristics of each data visualization employed.","sidebar":"tutorialSidebar"},"Getting started/deployment":{"id":"Getting started/deployment","title":"Deployment","description":"No authentication","sidebar":"tutorialSidebar"},"Getting started/install":{"id":"Getting started/install","title":"Introduction","description":"Trial Monitor is a tool that enables developers and researchers to create personalized web dashboards for monitoring participants in technology-enabled field trials. The tool was designed to reduce the work of developing one\u2019s own dashboard, the need to adapt the technology stack to an existing dashboard, or the need to create a different dashboard tool for each project.","sidebar":"tutorialSidebar"},"UI Definition/dashboard":{"id":"UI Definition/dashboard","title":"Dashboard","description":"The Dashboard of the system by default displays a table listing all users and users\' properties. It is, however, possible to configure the Dashboard with additional components.","sidebar":"tutorialSidebar"},"UI Definition/layout":{"id":"UI Definition/layout","title":"Layout","description":"Trial Monitor provides interface components to support the personalization of the layout of each page.","sidebar":"tutorialSidebar"},"UI Definition/overview":{"id":"UI Definition/overview","title":"Overview","description":"Trial Monitor can be organized into pages, and each page can be customized according to the requirement of each project. The user interface of each can be configured by arranging the different data visualization and layout components that are made available.","sidebar":"tutorialSidebar"},"UI Definition/ui_components":{"id":"UI Definition/ui_components","title":"Data Components","description":"The main purpose of Data Components is to support the data analysis by representing data visually. Each component has type property that specifies which component should be used, properties common to all components, as well as other properties specific to the type of component.","sidebar":"tutorialSidebar"}}}')}}]);