"use strict";(self.webpackChunktm_docs=self.webpackChunktm_docs||[]).push([[70],{3905:function(e,t,a){a.d(t,{Zo:function(){return u},kt:function(){return c}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=p(a),c=r,f=m["".concat(s,".").concat(c)]||m[c]||d[c]||i;return a?n.createElement(f,o(o({ref:t},u),{},{components:a})):n.createElement(f,o({ref:t},u))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},5550:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return u},default:function(){return m}});var n=a(7462),r=a(3366),i=(a(7294),a(3905)),o=["components"],l={id:"overview",title:"Overview"},s=void 0,p={unversionedId:"Databases/overview",id:"Databases/overview",isDocsHomePage:!1,title:"Overview",description:"Trial Monitor is capable of connecting to multiple databases and present information from these different databases under a single interface. Currently we support four different types of databases: SQL, Firebase, and Fhir\\*.",source:"@site/docs/02-Databases/01-overview.md",sourceDirName:"02-Databases",slug:"/Databases/overview",permalink:"/trial-monitor/Databases/overview",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"overview",title:"Overview"},sidebar:"tutorialSidebar",previous:{title:"SQL",permalink:"/trial-monitor/Data Connectors/sql"},next:{title:"Fhir",permalink:"/trial-monitor/Databases/fhir"}},u=[{value:"Database definition",id:"database-definition",children:[{value:"Filters",id:"filters",children:[]}]}],d={toc:u};function m(e){var t=e.components,a=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Trial Monitor is capable of connecting to multiple databases and present information from these different databases under a single interface. Currently we support four different types of databases: ",(0,i.kt)("a",{parentName:"p",href:"sql"},"SQL"),", ",(0,i.kt)("a",{parentName:"p",href:"firebase"},"Firebase"),", and ",(0,i.kt)("a",{parentName:"p",href:"fhir"},"Fhir"),"*","."),(0,i.kt)("p",null,"The main functionalities are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"the attribute selection")," -")," Allows the selection of a subset of attributes from the target tuples/documents."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"the inner join aggregation")," -")," Allows the combination of multiple tables, which involves the concept of referring other tables."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"the filtering operation")," -")," Provides a way of filtering the information to be retrieved according to specified operators and thresholds.")),(0,i.kt)("h2",{id:"database-definition"},"Database definition"),(0,i.kt)("p",null,"In order to retrieve that same data, you must define both the data structure and database access details in the file ",(0,i.kt)("inlineCode",{parentName:"p"},"site.yaml")," inside the directory ",(0,i.kt)("inlineCode",{parentName:"p"},"config/blueprints"),". ",(0,i.kt)("strong",{parentName:"p"},"Note:")," You only need to define the structure of the desired data and not the whole schema."),(0,i.kt)("p",null,"In the ",(0,i.kt)("inlineCode",{parentName:"p"},"site.yaml")," you must define a property ",(0,i.kt)("inlineCode",{parentName:"p"},"databases")," which contains one or multiple database definitions, for instance:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"databases:\n  - id: dbName\n    type: mysql\n    users:\n      table: User\n      idAttribute: externalID\n      nmAttributes: [name, gender, birthDate]\n      filters:\n        - target: isAdmin\n          operator: '=='\n          value: 1\n")),(0,i.kt)("p",null,"Each database definition has:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"id")," - a string that should be defined in case there are multiple databases")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"type")," - ",(0,i.kt)("inlineCode",{parentName:"p"},"<firebase>")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"p"},"<mysql>")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"p"},"<postgresql>")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"p"},"<mariadb>")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"p"},"<sqlite>")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"p"},"<mssql>"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"subtype")," - only if type is ",(0,i.kt)("inlineCode",{parentName:"p"},"firebase"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"coubdb")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"fhir")),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"firebase"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"<realtime>")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"li"},"<cloudfirestore>")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"fhir"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"<healthcareApi>")," ","|"," ",(0,i.kt)("inlineCode",{parentName:"li"},"<hapi>")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"config")," - properties for data access. Check the corresponding database page for more information.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"users")," - as a table or collection related to the users of the system always exists, it is through this property you are able to define:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"table")," - the name of the table or document."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"idAttribute")," - the user identifier. It should be defined in case there are multiple databases and the identifier is a normal attribute instead of a primary key. This ",(0,i.kt)("inlineCode",{parentName:"li"},"idAttribute")," will assume values similar to other databases users identifiers."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"nmAttributes")," - the attributes to be presented in the participants table. It can either assume the value of an array or in case it is not defined, all attributes will be shown."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"filters")," - enables developers to filters users according to specific values."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"structure")," - the data structure for the database. Check the corresponding database page for more information."))),(0,i.kt)("h3",{id:"filters"},"Filters"),(0,i.kt)("p",null," Filters are defined based on the property ",(0,i.kt)("inlineCode",{parentName:"p"},"filters"),", consisting of an array of filters. Each filter entry contains:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"target")," - the attribute to be the target for filtering"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"operator")," - as the name implies, the operator to be applied"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"value")," - the value to be compared with")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"filters:\n  - target: isAdmin\n    operator: '=='\n    value: false\n")))}m.isMDXComponent=!0}}]);