"use strict";(self.webpackChunktm_docs=self.webpackChunktm_docs||[]).push([[330],{8788:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var t=i(5893),o=i(1151);const r={id:"deployment",title:"Deployment"},c=void 0,s={id:"Getting started/deployment",title:"Deployment",description:"No authentication",source:"@site/docs/01-Getting started/05-deployment.md",sourceDirName:"01-Getting started",slug:"/Getting started/deployment",permalink:"/trial-monitor/Getting started/deployment",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{id:"deployment",title:"Deployment"},sidebar:"tutorialSidebar",previous:{title:"Configuration",permalink:"/trial-monitor/Getting started/configuration"},next:{title:"Overview",permalink:"/trial-monitor/Data Connectors/overview"}},a={},l=[{value:"No authentication",id:"no-authentication",level:2},{value:"Keycloak",id:"keycloak",level:2},{value:"Requirement: Docker configuration requirement",id:"requirement-docker-configuration-requirement",level:4},{value:"1. Update the ui-config file",id:"1-update-the-ui-config-file",level:4},{value:"2. Start the services",id:"2-start-the-services",level:4},{value:"3. Create an admin account",id:"3-create-an-admin-account",level:4},{value:"4. Login to Admin Console",id:"4-login-to-admin-console",level:4},{value:"5. Create Trial Monitor client",id:"5-create-trial-monitor-client",level:4},{value:"6. Assign admin role to trial-monitor-admin client",id:"6-assign-admin-role-to-trial-monitor-admin-client",level:4},{value:"7. Update files in config folder",id:"7-update-files-in-config-folder",level:4},{value:"8. Create a client for the user interface",id:"8-create-a-client-for-the-user-interface",level:4},{value:"9. Update ui-config.json file (Only in Production mode)",id:"9-update-ui-configjson-file-only-in-production-mode",level:4},{value:"10. Create users and associate them to groups",id:"10-create-users-and-associate-them-to-groups",level:4},{value:"Firebase",id:"firebase",level:2},{value:"Deployment to a subdirectory",id:"deployment-to-a-subdirectory",level:2},{value:"HTTPS",id:"https",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"no-authentication",children:"No authentication"}),"\n",(0,t.jsx)(n.p,{children:"By default, Trial Monitor will be served from the root of the server and without authentication. To launch Trial Monitor in production without authentication, check out the code from this repository and run:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"docker-compose up -d\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In many cases, you'll want to control who has access to Trial Monitor. Trial Monitor helps you with this by providing support to authentication through ",(0,t.jsx)(n.a,{href:"#keycloak",children:"Keycloak"})," or ",(0,t.jsx)(n.a,{href:"#firebase",children:"Firebase"}),"."]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["If you're running Trial Monitor in a VM set the ",(0,t.jsx)(n.code,{children:"API_URL"})," with ",(0,t.jsx)(n.code,{children:"http://<ip>/api"})," and set the Host rule on the services' labels (e.g., ",(0,t.jsx)(n.code,{children:'- "traefik.http.routers.frontend.rule=Host('}),"<ip>",(0,t.jsx)(n.code,{children:") && PathPrefix("}),"/",(0,t.jsx)(n.code,{children:')"'}),")."]})}),"\n",(0,t.jsx)(n.h2,{id:"keycloak",children:"Keycloak"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://www.keycloak.org/",children:"Keycloak"})," can be particularly useful in cases where you have to manage the authentication of users, roles and permissions.\nAfter its configuration, you'll be able to limit users' access to the pages and components their role allows them access to."]}),"\n",(0,t.jsx)(n.h4,{id:"requirement-docker-configuration-requirement",children:"Requirement: Docker configuration requirement"}),"\n",(0,t.jsxs)(n.p,{children:["Note that Keycloak needs to be accessible using a hostname other than localhost, otherwise it will cause containers to not trust issued tokens or not be able to access Keycloak (since localhost is resolved in the container itself).\nNormally, Docker Desktop for macOS and Windows automatically creates a hostname ",(0,t.jsx)(n.code,{children:"host.docker.internal"})," which is used throughout this guide, however check it before moving on.\nThis can be achieved by adding the following line in ",(0,t.jsx)(n.code,{children:"/etc/hosts"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"127.0.0.1 host.docker.internal\n"})}),"\n",(0,t.jsx)(n.h4,{id:"1-update-the-ui-config-file",children:"1. Update the ui-config file"}),"\n",(0,t.jsxs)(n.p,{children:["Edit the ",(0,t.jsx)(n.code,{children:"auth"})," property inside ",(0,t.jsx)(n.code,{children:"config/ui-config.json"})," file with the following content:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'"auth": {\n  "provider": "keycloak",\n  "config": {\n    "url": "http://host.docker.internal/auth/",\n    "realm": "trial-monitor",\n    "clientId": "trial-monitor-ui"\n  }\n}\n'})}),"\n",(0,t.jsx)(n.h4,{id:"2-start-the-services",children:"2. Start the services"}),"\n",(0,t.jsx)(n.p,{children:"To get started, you can deploy Keycloak yourself or use the provided docker compose files."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Production\ndocker-compose -f docker-compose.auth.yaml up -d\n\n# Development\ndocker-compose -f docker-compose.devauth.yaml up -d\n"})}),"\n",(0,t.jsx)(n.h4,{id:"3-create-an-admin-account",children:"3. Create an admin account"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Production\ndocker-compose -f docker-compose.auth.yaml exec -e KEYCLOAK_ADMIN=<Username> -e KEYCLOAK_ADMIN_PASSWORD=<Password> keycloak /opt/keycloak/bin/kc.sh start --auto-build\ndocker-compose -f docker-compose.auth.yaml restart keycloak\n\n# Development\ndocker-compose -f docker-compose.devauth.yaml exec -e KEYCLOAK_ADMIN=<Username> -e KEYCLOAK_ADMIN_PASSWORD=<Password> keycloak /opt/keycloak/bin/kc.sh start-dev\ndocker-compose -f docker-compose.devauth.yaml restart keycloak\n"})}),"\n",(0,t.jsx)(n.h4,{id:"4-login-to-admin-console",children:"4. Login to Admin Console"}),"\n",(0,t.jsxs)(n.p,{children:["Go to the Keycloak Admin Console (",(0,t.jsx)(n.code,{children:"/auth/admin"}),") and login with the username and password you created earlier."]}),"\n",(0,t.jsx)(n.h4,{id:"5-create-trial-monitor-client",children:"5. Create Trial Monitor client"}),"\n",(0,t.jsxs)(n.p,{children:["On Master realm, click on ",(0,t.jsx)(n.code,{children:"Clients"})," and create a client with the Client ID ",(0,t.jsx)(n.code,{children:"trial-monitor-admin"}),". Access type should be set to confidential, disable all flows to grant tokens and enable service accounts like in the following image:"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Configuration of the trial monitor admin client",src:i(7415).Z+"",width:"2788",height:"1898"})}),"\n",(0,t.jsx)(n.p,{children:"Don't forget to save in the end."}),"\n",(0,t.jsx)(n.h4,{id:"6-assign-admin-role-to-trial-monitor-admin-client",children:"6. Assign admin role to trial-monitor-admin client"}),"\n",(0,t.jsxs)(n.p,{children:["Inside ",(0,t.jsx)(n.code,{children:"trial-monitor-admin"})," client, click on ",(0,t.jsx)(n.code,{children:"Service Account Roles"})," tab. On ",(0,t.jsx)(n.code,{children:"Available Roles"})," select ",(0,t.jsx)(n.code,{children:"admin"})," and click on ",(0,t.jsx)(n.code,{children:"Add selected >>"})," button."]}),"\n",(0,t.jsx)(n.h4,{id:"7-update-files-in-config-folder",children:"7. Update files in config folder"}),"\n",(0,t.jsxs)(n.p,{children:["a) Replace ",(0,t.jsx)(n.code,{children:"auth.yaml"})," file in the ",(0,t.jsx)(n.code,{children:"config/auth"})," directory with a ",(0,t.jsx)(n.code,{children:"auth.json"})," file with the following content:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "provider": "keycloak",\n  "baseUrl": "http://host.docker.internal/auth",\n  "adminClientId": "trial-monitor-admin",\n  "adminClientSecret": "<admin_client_secret>",\n  "clientRealm": "trial-monitor",\n  "clientId": "trial-monitor-api",\n  "groups": {\n    "admin": [\n      "read-activity",\n      "read-sensitive-info"\n    ],\n    "user": [\n      "read-activity"\n    ]\n  }\n}\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["If you're running Trial Monitor in a VM replace the ",(0,t.jsx)(n.code,{children:"baseUrl"})," with ",(0,t.jsx)(n.code,{children:"http://<your_vm_dns>/auth"}),"."]})}),"\n",(0,t.jsxs)(n.p,{children:["b) Replace ",(0,t.jsx)(n.code,{children:"adminClientSecret"})," value in ",(0,t.jsx)(n.code,{children:"auth.json"})," with the Keycloak secret that can be retrieved in the ",(0,t.jsx)(n.code,{children:"Credentials"})," tab of the ",(0,t.jsx)(n.code,{children:"trial-monitor-admin"})," client."]}),"\n",(0,t.jsxs)(n.p,{children:["c) Add the desired groups and roles in ",(0,t.jsx)(n.code,{children:"groups"})," property in the ",(0,t.jsx)(n.code,{children:"auth.json"})," file. Edit the required permissions on pages and/or components (",(0,t.jsx)(n.code,{children:"config/blueprints/pages"}),") using the ",(0,t.jsx)(n.code,{children:"requiredPermissions"})," attribute. Please check the ",(0,t.jsx)(n.a,{href:"/advanced/custom-permissions",children:"Custom permissions"})," page for details."]}),"\n",(0,t.jsx)(n.p,{children:"d) Restart all services, the realm will be created and configured automatically by the application on startup:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Production\ndocker-compose -f docker-compose.auth.yaml down && docker-compose -f docker-compose.auth.yaml up -d\n\n# Development\ndocker-compose -f docker-compose.devauth.yaml down && docker-compose -f docker-compose.devauth.yaml up -d\n"})}),"\n",(0,t.jsx)(n.h4,{id:"8-create-a-client-for-the-user-interface",children:"8. Create a client for the user interface"}),"\n",(0,t.jsxs)(n.p,{children:["After the services are available again, open Keycloak Admin Console (",(0,t.jsx)(n.code,{children:"/auth/admin"}),"). You'll be able to see a newly created realm (",(0,t.jsx)(n.code,{children:"Trial-monitor"}),"), select it, go to ",(0,t.jsx)(n.code,{children:"Clients"})," and create a new client with ",(0,t.jsx)(n.code,{children:"trial-monitor-ui"})," Client ID. The access type should be public and configure the ",(0,t.jsx)(n.code,{children:"Valid Redirect URIs"})," and ",(0,t.jsx)(n.code,{children:"Web Origins"})," like in the following image:"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Configuration of the trial monitor ui client",src:i(1443).Z+"",width:"2480",height:"2134"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Valid Redirect URIs\nhttp://localhost/*\nhttp://host.docker.internal/*\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsx)(n.p,{children:"In case you are deploying Trial Monitor into a VM, make sure you add the DNS in the Valid Redirect URIs."})}),"\n",(0,t.jsx)(n.p,{children:"Don't forget to save in the end."}),"\n",(0,t.jsx)(n.h4,{id:"9-update-ui-configjson-file-only-in-production-mode",children:"9. Update ui-config.json file (Only in Production mode)"}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsx)(n.p,{children:"If you're running Trial Monitor in development mode skip this part."})}),"\n",(0,t.jsxs)(n.p,{children:["In ",(0,t.jsx)(n.code,{children:"trial-monitor-ui"})," client check the ",(0,t.jsx)(n.code,{children:"Installation"})," tab, and select the ",(0,t.jsx)(n.code,{children:"Keycloak OIDC JSON"})," format. Copy the generated configuration and merge the contents in the property ",(0,t.jsx)(n.code,{children:"auth"})," of the file ",(0,t.jsx)(n.code,{children:"config/ui-config.json"}),". The ",(0,t.jsx)(n.code,{children:"auth"})," property should look similar to this:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'  "auth": {\n    "provider": "keycloak",\n    "config": {\n      "realm": "trial-monitor",\n      "clientId": "trial-monitor-ui",\n      "url": "http://<domain_name>/auth/",\n      "auth-server-url": "http://<domain_name>/auth",\n      "ssl-required": "external",\n      "resource": "trial-monitor-ui",\n      "public-client": true,\n      "confidential-port": 0\n    }\n  }\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsxs)(n.p,{children:["Update ",(0,t.jsx)(n.code,{children:"url"})," with the domain name from ",(0,t.jsx)(n.code,{children:"auth-server-url"}),"."]})}),"\n",(0,t.jsx)(n.h4,{id:"10-create-users-and-associate-them-to-groups",children:"10. Create users and associate them to groups"}),"\n",(0,t.jsxs)(n.p,{children:["You may now use the Keycloak Admin Console (",(0,t.jsx)(n.code,{children:"/auth/admin"}),") to create users. For this, select the realm that was automatically created (",(0,t.jsx)(n.code,{children:"Trial-monitor"}),"), go to ",(0,t.jsx)(n.code,{children:"Users"})," and create one. After its creation, use the ",(0,t.jsx)(n.code,{children:"Groups"})," tab to associate with the groups they belong to (select one of the ",(0,t.jsx)(n.code,{children:"Available Groups"})," and click on ",(0,t.jsx)(n.code,{children:"Join"})," button). Permissions will be automatically assigned to the users based on the groups they belong to."]}),"\n",(0,t.jsx)(n.h2,{id:"firebase",children:"Firebase"}),"\n",(0,t.jsx)(n.p,{children:"Firebase authentication can be a simple way to add authentication to Trial Monitor, especially in cases when you are already using Firebase as a database connector. Currently, Trial Monitor only supports Firebase authentication with the email and password provider."}),"\n",(0,t.jsx)(n.p,{children:"To enable the authentication, on the Firebase console, add the provider Email/Password, and add your domain to the authorized domains. On the Service accounts section generate a new private account key."}),"\n",(0,t.jsxs)(n.p,{children:["On the ",(0,t.jsx)(n.code,{children:"config/auth.yaml"})," set the provider to ",(0,t.jsx)(n.code,{children:"firebase"}),", and the ",(0,t.jsx)(n.code,{children:"serviceAccount"})," property with the service account information generated on the previous step:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"provider: firebase\nserviceAccount:\n   type: service_account\n   project_id: project-id-00000\n   private_key_id: KEY_ID\n  ...\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You'll also need to edit the ",(0,t.jsx)(n.code,{children:"config/ui-config.json"}),' to update the configuration used by the browser application. Set the provider to "firebase".']}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "auth": {\n    "provider": "firebase",\n    "config": {\n      "apiKey": "API_KEY",\n      "authDomain": "AUTH_DOMAIN",\n      "projectId": "PROJECT_ID",\n    }\n  }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"After this you'll be ready to launch Trial Monitor using Firebase authentication:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker-compose up -d\n"})}),"\n",(0,t.jsx)(n.p,{children:"New users can be created through the Firebase console."}),"\n",(0,t.jsx)(n.admonition,{type:"danger",children:(0,t.jsx)(n.p,{children:"Be aware that you should not commit the service account configuration to a public repository."})}),"\n",(0,t.jsx)(n.h2,{id:"deployment-to-a-subdirectory",children:"Deployment to a subdirectory"}),"\n",(0,t.jsx)(n.p,{children:"By default Trial Monitor expects to be deployed on the domain root; however, it's possible to configure Trial Monitor to be deployed on a subdirectory as well. To achieve this, we need to make the following changes and rebuild the Docker images:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["On the Docker Compose file:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Set the ",(0,t.jsx)(n.code,{children:"PUBLIC_URL"})," variables to the desired path (e.g. ",(0,t.jsx)(n.code,{children:"/trial-monitor"}),");"]}),"\n",(0,t.jsxs)(n.li,{children:["On the ",(0,t.jsx)(n.code,{children:"frontend"})," service, change the path of the volume that is mounted to include the new path (e.g., ",(0,t.jsx)(n.code,{children:"- ./config/ui-config.json:/usr/share/nginx/html/**trial-monitor**/ui-config.json"}),") and change the PathPrefix in the labels (e.g., ",(0,t.jsx)(n.code,{children:"PathPrefix("}),"/trial-monitor",(0,t.jsx)(n.code,{children:")"}),");"]}),"\n",(0,t.jsxs)(n.li,{children:["On the ",(0,t.jsx)(n.code,{children:"api"})," service, change the PathPrefix in the labels (e.g., ",(0,t.jsx)(n.code,{children:"PathPrefix("}),"/trial-monitor/api",(0,t.jsx)(n.code,{children:")"}),");"]}),"\n",(0,t.jsxs)(n.li,{children:["In case you are deploying with authentication, also set the ",(0,t.jsx)(n.code,{children:"KC_HOSTNAME_PATH"})," and ",(0,t.jsx)(n.code,{children:"KC_HTTP_RELATIVE_PATH"})," with the new path (e.g., /trial-monitor/auth) and change the PathPrefix in the labels (e.g., ",(0,t.jsx)(n.code,{children:"PathPrefix("}),"/trial-monitor/auth",(0,t.jsx)(n.code,{children:")"}),");"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["On the ",(0,t.jsx)(n.code,{children:"ui-config.json"})," file:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Change the ",(0,t.jsx)(n.code,{children:"api_url"})," to include the new path (e.g. /trial-monitor/api);"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Finally, build the docker images and start the services: ",(0,t.jsx)(n.code,{children:"docker-compose up --build"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"https",children:"HTTPS"}),"\n",(0,t.jsxs)(n.p,{children:["To deploy Trial Monitor with HTTPS we have added configuration examples for certificates from ",(0,t.jsx)(n.a,{href:"https://letsencrypt.org/",children:"Let's Encrypt"}),". To achieve this follow these instructions:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["On the Docker Compose file:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Remove ",(0,t.jsx)(n.code,{children:"traefik.http.routers.api.entrypoints=web"})," from the ",(0,t.jsx)(n.code,{children:"api"})," and ",(0,t.jsx)(n.code,{children:"frontend"})," services;"]}),"\n",(0,t.jsxs)(n.li,{children:["Uncomment the following lines in the ",(0,t.jsx)(n.code,{children:"api"})," and ",(0,t.jsx)(n.code,{children:"frontend"})," services:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"traefik.http.routers.api.entrypoints=websecure"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"traefik.http.routers.api.tls.certresolver=myresolver"})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Uncomment the following lines in the ",(0,t.jsx)(n.code,{children:"traefik"})," service:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"--entrypoints.websecure.address=:443"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"--certificatesresolvers.myresolver.acme.httpchallenge=true"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--certificatesresolvers.myresolver.acme.email=<YOUR_EMAIL>"})," (don't forget to add your email here)"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"})}),"\n",(0,t.jsxs)(n.li,{children:["And in the volumes part: ",(0,t.jsx)(n.code,{children:"- ./data/letsencrypt:/letsencrypt"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Make sure the Host is correctly defined in ",(0,t.jsx)(n.code,{children:"api"}),", ",(0,t.jsx)(n.code,{children:"frontend"})," and, if it's your case, the ",(0,t.jsx)(n.code,{children:"keycloak"})," services."]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},7415:(e,n,i)=>{i.d(n,{Z:()=>t});const t=i.p+"assets/images/admin-client-3a613d4fb577e9a0c640ec16151e627b.png"},1443:(e,n,i)=>{i.d(n,{Z:()=>t});const t=i.p+"assets/images/ui-client-345009619aec79cde944b5b06091d641.png"},1151:(e,n,i)=>{i.d(n,{Z:()=>s,a:()=>c});var t=i(7294);const o={},r=t.createContext(o);function c(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);